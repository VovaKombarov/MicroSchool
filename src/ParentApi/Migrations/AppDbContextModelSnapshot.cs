// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParentApi.Data;

#nullable disable

namespace ParentApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParentApi.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<char>("Letter")
                        .HasColumnType("character(1)")
                        .HasColumnName("letter");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_classes");

                    b.ToTable("classes", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.CompletedHomework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<int>("StudentInLessonId")
                        .HasColumnType("integer")
                        .HasColumnName("studentinlessonid");

                    b.Property<string>("Work")
                        .HasColumnType("text")
                        .HasColumnName("work");

                    b.HasKey("Id")
                        .HasName("pk_completedhomeworks");

                    b.HasIndex("StudentInLessonId")
                        .HasDatabaseName("ix_completedhomeworks_studentinlessonid");

                    b.ToTable("completedhomeworks", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FinishDT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finishdt");

                    b.Property<string>("Howework")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("howework");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lessonid");

                    b.Property<DateTime>("StartDT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdt");

                    b.HasKey("Id")
                        .HasName("pk_homeworks");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_homeworks_lessonid");

                    b.ToTable("homeworks", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.HomeworkProgressStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HomeworkStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("homeworkstatusid");

                    b.Property<DateTime>("StatusSetDT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("statussetdt");

                    b.Property<int>("StudentInLessonId")
                        .HasColumnType("integer")
                        .HasColumnName("studentinlessonid");

                    b.HasKey("Id")
                        .HasName("pk_homeworkprogressstatuses");

                    b.HasIndex("HomeworkStatusId")
                        .HasDatabaseName("ix_homeworkprogressstatuses_homeworkstatusid");

                    b.HasIndex("StudentInLessonId")
                        .HasDatabaseName("ix_homeworkprogressstatuses_studentinlessonid");

                    b.ToTable("homeworkprogressstatuses", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.HomeworkStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_homeworkstatuses");

                    b.ToTable("homeworkstatuses", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LessonDT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lessondt");

                    b.Property<int>("TeacherClassSubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("teacherclasssubjectid");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.HasIndex("TeacherClassSubjectId")
                        .HasDatabaseName("ix_lessons_teacherclasssubjectid");

                    b.ToTable("lessons", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_parents");

                    b.ToTable("parents", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("classid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_students_classid");

                    b.ToTable("students", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.StudentInLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lessonid");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("studentid");

                    b.HasKey("Id")
                        .HasName("pk_studentsinlessons");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_studentsinlessons_lessonid");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_studentsinlessons_studentid");

                    b.ToTable("studentsinlessons", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subjectname");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.ToTable("subjects", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_teachers");

                    b.ToTable("teachers", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.TeacherClassSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("classid");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subjectid");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacherid");

                    b.HasKey("Id")
                        .HasName("pk_teachersclassessubjects");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_teachersclassessubjects_classid");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_teachersclassessubjects_subjectid");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_teachersclassessubjects_teacherid");

                    b.ToTable("teachersclassessubjects", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.TeacherParentMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("MeetingDT")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("meetingdt");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("studentid");

                    b.Property<int?>("StudentInLessonId")
                        .HasColumnType("integer")
                        .HasColumnName("studentinlessonid");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacherid");

                    b.Property<bool>("TeacherInitiative")
                        .HasColumnType("boolean")
                        .HasColumnName("teacherinitiative");

                    b.HasKey("Id")
                        .HasName("pk_teachersparentsmeetings");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_teachersparentsmeetings_parentid");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_teachersparentsmeetings_studentid");

                    b.HasIndex("StudentInLessonId")
                        .HasDatabaseName("ix_teachersparentsmeetings_studentinlessonid");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_teachersparentsmeetings_teacherid");

                    b.ToTable("teachersparentsmeetings", "skool");
                });

            modelBuilder.Entity("ParentStudent", b =>
                {
                    b.Property<int>("ParentsId")
                        .HasColumnType("integer")
                        .HasColumnName("parentsid");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer")
                        .HasColumnName("studentsid");

                    b.HasKey("ParentsId", "StudentsId")
                        .HasName("pk_parentstudent");

                    b.HasIndex("StudentsId")
                        .HasDatabaseName("ix_parentstudent_studentsid");

                    b.ToTable("parentstudent", "skool");
                });

            modelBuilder.Entity("ParentApi.Models.CompletedHomework", b =>
                {
                    b.HasOne("ParentApi.Models.StudentInLesson", "StudentInLesson")
                        .WithMany()
                        .HasForeignKey("StudentInLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_completedhomeworks_studentsinlessons_studentinlessonid");

                    b.Navigation("StudentInLesson");
                });

            modelBuilder.Entity("ParentApi.Models.Homework", b =>
                {
                    b.HasOne("ParentApi.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_homeworks_lessons_lessonid");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ParentApi.Models.HomeworkProgressStatus", b =>
                {
                    b.HasOne("ParentApi.Models.HomeworkStatus", "HomeworkStatus")
                        .WithMany()
                        .HasForeignKey("HomeworkStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_homeworkprogressstatuses_homeworkstatuses_homeworkstatusid");

                    b.HasOne("ParentApi.Models.StudentInLesson", "StudentInLesson")
                        .WithMany()
                        .HasForeignKey("StudentInLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_homeworkprogressstatuses_studentsinlessons_studentinlessonid");

                    b.Navigation("HomeworkStatus");

                    b.Navigation("StudentInLesson");
                });

            modelBuilder.Entity("ParentApi.Models.Lesson", b =>
                {
                    b.HasOne("ParentApi.Models.TeacherClassSubject", "TeacherClassSubject")
                        .WithMany()
                        .HasForeignKey("TeacherClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_teachersclassessubjects_teacherclasssubjectid");

                    b.Navigation("TeacherClassSubject");
                });

            modelBuilder.Entity("ParentApi.Models.Student", b =>
                {
                    b.HasOne("ParentApi.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_classes_classid");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ParentApi.Models.StudentInLesson", b =>
                {
                    b.HasOne("ParentApi.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studentsinlessons_lessons_lessonid");

                    b.HasOne("ParentApi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studentsinlessons_students_studentid");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ParentApi.Models.TeacherClassSubject", b =>
                {
                    b.HasOne("ParentApi.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachersclassessubjects_classes_classid");

                    b.HasOne("ParentApi.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachersclassessubjects_subjects_subjectid");

                    b.HasOne("ParentApi.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachersclassessubjects_teachers_teacherid");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ParentApi.Models.TeacherParentMeeting", b =>
                {
                    b.HasOne("ParentApi.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachersparentsmeetings_parents_parentid");

                    b.HasOne("ParentApi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachersparentsmeetings_students_studentid");

                    b.HasOne("ParentApi.Models.StudentInLesson", "StudentInLesson")
                        .WithMany()
                        .HasForeignKey("StudentInLessonId")
                        .HasConstraintName("fk_teachersparentsmeetings_studentsinlessons_studentinlessonid");

                    b.HasOne("ParentApi.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachersparentsmeetings_teachers_teacherid");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("StudentInLesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ParentStudent", b =>
                {
                    b.HasOne("ParentApi.Models.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parentstudent_parents_parentsid");

                    b.HasOne("ParentApi.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parentstudent_students_studentsid");
                });
#pragma warning restore 612, 618
        }
    }
}
